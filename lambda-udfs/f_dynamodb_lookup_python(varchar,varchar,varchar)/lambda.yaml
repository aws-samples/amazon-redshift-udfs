AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
          -
            PolicyName: CloudwatchLogs
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                  Resource:
                    - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                -
                  Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:GetItem
                  Resource:
                    - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
  LambdaUDFFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       FunctionName: f-dynamodb-lookup-python-varchar-varchar-varchar
       Role: !GetAtt 'LambdaRole.Arn'
       Handler: index.handler
       Runtime: python3.9
       Timeout: 300
       Code:
         ZipFile: |
            import decimal
            import json

            import boto3

            dynamodb = boto3.resource("dynamodb")


            class DecimalEncoder(json.JSONEncoder):
                """Handle JSON encoding of Decimal data (necessary because TypeDeserializer defaults to Decimal for floating point values)."""

                def default(self, o):
                    if isinstance(o, decimal.Decimal):
                        return str(o)
                    return super(DecimalEncoder, self).default(o)


            def handler(event, context):
                response = {"success": False, "num_records": event["num_records"]}
                try:
                    result = []
                    for table_name, column_name, column_value in event["arguments"]:
                        table = dynamodb.Table(table_name)
                        try:
                            response = table.get_item(Key={column_name: column_value})
                            result.append(json.dumps(response["Item"], cls=DecimalEncoder))
                        except Exception as e:
                            print(f"Error retrieving from DDB: {e}")
                            result.append(None)
                    response["success"] = True
                    response["results"] = result
                except Exception as e:
                    response["error_msg"] = str(e)
                return json.dumps(response)