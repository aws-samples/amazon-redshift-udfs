AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  S3Bucket:
    Description: the S3 Bucket containing the Lambda layer
    Type: String
  S3Key:
    Description: the S3 Key containing the Lambda layer
    Type: String
Conditions:
  NoS3Prefix: !Equals [!Ref S3Key, '']
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
          -
            PolicyName: CloudwatchLogs
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                  Resource:
                    - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
  FastEmbedLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.9
      Content: 
        S3Bucket: !Ref S3Bucket
        S3Key: !If ["NoS3Prefix", "fastembed.zip", !Sub "${S3Key}/fastembed.zip"]
      Description: FastEmbed library
      LayerName: fastembed
  LambdaUDFFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       FunctionName: f-fastembed-embedding-varchar
       Role: !GetAtt 'LambdaRole.Arn'
       Handler: index.handler
       Runtime: python3.9
       Layers:
        - !Ref FastEmbedLayer
       Timeout: 300
       Code:
         ZipFile: |
          import json, sys
          from fastembed import TextEmbedding
          embedding_model = TextEmbedding()          
                  
          def handler(event, context):
              print(event)
              redshift_response = {"success": False, "num_records": event["num_records"]}
              try:
                  result = []
                  documents = []
                  for row in event["arguments"]:
                    documents.append(row[0])

                  embeddings_list = list(embedding_model.embed(documents))
                  for embedding in embeddings_list:
                    result.append('['+','.join(map(str, embedding))+']')

                  redshift_response["success"] = True
                  redshift_response["results"] = result
              except Exception as e:
                  redshift_response["error_msg"] = str(e)
                  print('Error: '+ str(e))
                  exc_type, exc_obj, exc_tb = sys.exc_info()
                  print(exc_type, exc_tb.tb_lineno)
              return json.dumps(redshift_response)